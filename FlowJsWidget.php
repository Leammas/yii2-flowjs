<?php
namespace leammas\yii2\flowjs;

use yii\base\Widget;
use yii\web\JsExpression;
use yii\web\View;
use yii\helpers\Json;
use yii\helpers\Html;

/**
 * %ClassDescription%
 *
 * @author Самойлов Владимир <leammas@gmail.com>
 */
class FlowJsWidget extends Widget
{

    const PLUGIN_NAME = 'flowjs';

    /**
     * @var array Constructor options for the flow-js plugin.
     * @todo default 'target' - url
     * @see https://github.com/flowjs/flow.js#full-documentation
     */
    public $clientOptions = [];

    /**
     * @var array Flowjs evend handlers. Key - event. Value - js-function handler.
     * @see https://github.com/flowjs/flow.js#events
     */
    public $eventHandlers = [];

    /**
     * @var array the HTML attributes for the target element.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     * If 'id' is empty, it will be autogenerated. Id also used in js var naming, so it must be compatible.
     */
    public $options = [];

    /**
     * The tag to be rendered and assigned as flow-element.
     * Must be compatible with Html::tag() method.
     * Button used by default.
     * @var string
     */
    public $targetTag = 'button';

    /**
     * Content to be inserted in the tag. Empty by default.
     * @var string
     */
    public $targetContent = '';

    /**
     * @var string the hashed variable to store the pluginOptions
     */
    protected $_hashVar;

    /**
     * @inheritdoc
     */
    public function run()
    {
        $this->registerClientScript();
        return Html::tag($this->targetTag, $this->targetContent, $this->options);
    }

    /**
     * Initializes client options
     */
    protected function initClientOptions()
    {
        $options = $this->clientOptions;
        foreach ($options as $key => $value) {
            if (!$value instanceof JsExpression
            ) {
                $options[$key] = new JsExpression($value);
            }
        }
        $this->clientOptions = $options;
    }

    /**
     * Generates a hashed variable to store the plugin `clientOptions`. Helps in reusing the variable for similar
     * options passed for other widgets on the same page. The following special data attribute will also be
     * added to the input field to allow accessing the client options via javascript:
     *
     * - 'data-plugin-flowjs' will store the hashed variable storing the plugin options.
     *
     * @param View $view the view instance
     */
    protected function hashPluginOptions($view)
    {
        $encOptions = empty($this->clientOptions) ? '{}' : Json::htmlEncode($this->clientOptions);
        $this->_hashVar = self::PLUGIN_NAME . '_' . hash('crc32', $encOptions);
        $this->options['data-plugin-' . self::PLUGIN_NAME] = $this->_hashVar;
        $view->registerJs("var {$this->_hashVar} = {$encOptions};\n", View::POS_HEAD);
    }

    protected function setOptionsId()
    {
        if (!isset($this->options['id']))
        {
            $this->options['id'] = $this->getId();
        }
        else
        {
            $this->setId($this->options['id']);
        }
    }

    /**
     * There will be no magic without this handler.
     */
    protected function setDefaultEventHandlers()
    {
        if (!isset($this->eventHandlers['filesSubmitted']))
        {
            $this->eventHandlers['filesSubmitted'] = "function(file) {{$this->getId()}.upload();}";
        }
    }

    /**
     * @todo make attributes of assignBrowse available
     * @todo fix AssignDrop
     * Registers the needed client script and options.
     */
    public function registerClientScript()
    {
        $js = '';
        $view = $this->getView();
        $this->setOptionsId();
        $this->setDefaultEventHandlers();
        $this->initClientOptions();
        $this->hashPluginOptions($view);
        $id = $this->getId();
        $js .= <<<JS
var {$id} = new Flow({$this->_hashVar});
{$id}.assignBrowse(document.getElementById('{$id}'));
{$id}.assignDrop(document.getElementById('{$id}'));
JS;
        foreach ($this->eventHandlers as $event => $handler)
        {
            $js .= "{$id}.on('{$event}', {$handler});";
        }
        FlowJsAsset::register($view);
        $view->registerJs($js);
    }

}
